library('devtools')
library('ggplot2')
library('plyr')
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
install.packages('RCurl')
install_github("StatsWithR/statsr")
library('devtools')
library('ggplot2')
library('plyr')
require('devtools')
library('devtools')
install_github('StatsWithR/statsr')
install.packages("Rcpp")
install.packages('plyr')
library(StatsRBHU)
data(arbuthnot)
library(statsr)
head(arbuthnot)
dim(arbuthnot)
arbuthnot[girls]
arbuthnot$girls
plot(arbuthnot$year, arbuthnot$girls)
plot(arbuthnot$year, arbuthnot$girls, type = "l")
head(present)
dim(present)
sum.birth.year <- ddply(present, .(year), summarise, steps = sum(boys))
library(ddply)
library(dplyr)
sum.birth.year <- ddply(present, .(year), summarise, steps = sum(boys))
library(plyr)
sum.birth.year <- plyr::ddply(present, .(year), summarise, steps = sum(boys))
View(sum.birth.year)
sum.birth.year <- plyr::ddply(present, .(year), summarise, number = sum(boys))
head(present)
sum(arbuthnot$girls)
length(arbuthnot$girls)
sum.birth.year <- plyr::ddply(present, .(year), summarise, total = (boys + girls))
View(sum.birth.year)
total.birth.year <- plyr::ddply(present, .(year), summarise, total = (boys + girls))
total.birth.year$boys <- plyr::ddply(present, .(year), summarise, boys = (boys))
View(total.birth.year)
birth.year <- plyr::ddply(present, .(year), summarise, total = (boys + girls))
birth.year$boys <- plyr::ddply(present, .(year), summarise, boys = (boys))
View(birth.year)
birth.year$boys.year <- NULL
View(birth.year)
birth.year$fraction <- lapply(present, function(x) x$total / x$boys)
birth.year$fraction <- lapply(present, function(x) total / boys)
head(present)
birth.year$fraction <- lapply(present, (total / boys)
birth.year$fraction <- lapply(present, (total / boys)
)
total <- present$girls + present$boys
prop_boys  <- total + present$boys
prop_boys  <- (total / present$boys)
plot(present$year, prop_boys, type ='l')
par(mfrow = c(1, 2))
plot(present$year, prop_boys, type ='l', col = 'blue')
plot(present$year, total, type ='l', col = 'red')
more_boys  <- ifelse(present$boys > present$girls, 'TRUE', 'FALSE')
more_boys
data <- present
View(data)
data$more <- ifelse(data$boys > data$girls, 'TRUE', 'FALSE')
prop_boy_girl <- data$boys / data$girls
plot(present$year, prop_boy_girl, type ='l', col = 'green')
prop_boy_girl <- data$boys / data$girls
prop_girl_boy <- data$girls / data$boys
par(mfrow = c(1, 2))
plot(present$year, prop_boy_girl, type ='l', col = 'green')
plot(present$year, prop_girl_boy, type ='l', col = 'green')
View(data)
data$total <- total
max(data$total)
data[, max(data$total)]
which.max(data$total)
data$year[which.max(data$total)]
$girls
arbuthnot$girls
dim(arbuthnot)
plot(arbuthnot$year, arbuthnot$girls, type = "l")
head(arbuthnot)
dim(present)
install_github('StatsWithR/statsr')
library('devtools')
install_github('StatsWithR/statsr')
install.packages('curl')
library('devtools')
library('curl')
install_github('StatsWithR/statsr')
data(nycflights)
names(nycflights)
library(statsr)
data(nycflights)
names(nycflights)
dim(nycflights)
ggplot(data = nycflights, aes(x = log10(dep_delay))) +
geom_histogram()
library('devtools')
library('curl')
library('ggplot2')
library('dplyr')
ggplot(data = nycflights, aes(x = log10(dep_delay))) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
data(nycflights)
names(nycflights)
ggplot(data = nycflights, aes(x = log10(dep_delay))) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
dim(sfo_feb_flights)
sfo_feb_flights %>%
summarise(mean_dd = mean(arr_delay), sd_dd = sd(arr_delay), n = n())
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 100)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 10)
sfo_arr_delay <- sfo_feb_flights %>%
filter(arr_delay > 120)
View(sfo_arr_delay)
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(arr_delay), iqr_dd =IQR(arr_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_dd = median(arr_delay), iqr_dd =IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
ggplot(nycflights, aes(x = factor(month), y = log10(dep_delay))) +
geom_boxplot()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_histogram()
ggplot(nycflights, aes(x = factor(month), y = log10(dep_delay))) +
geom_boxplot()
ggplot(nycflights, aes(x = month, y = dep_delay)) +
geom_histogram()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
View(nycflights)
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed")) %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
View(nycflights)
data(nycflights)
data(nycflights)
names(nycflights)
out_del <- nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed")) %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
data(nycflights)
data(nycflights)
data(nycflights)
data(nycflights)
names(nycflights)
out_del <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed")) %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
ll <- unique(nycflights$tailnum)
str(nycflights)
nycflights %>%
group_by(tailnum)
ll <- nycflights %>%
group_by(tailnum)
View(ll)
ll <- nycflights %>%
filter(tailnum)
ll <- nycflights %>%
group_by(tailnum)
nycflights <- nycflights %>%
mutate(avg_speed = distance / airtime * 60)
nycflights <- nycflights %>%
mutate(avg_speed = distance / air_time * 60)
nycflights %>%
filter(avg_speed == max(avg_speed))
nycflights %>%
filter(avg_speed == max(avg_speed)) %>% select(tailnum, avg_speed)
ggplot(nycflights, aes(x = avg_speed, y = distance)) +
geom_point()
ggplot(nycflights, aes(x = distance, y = avg_speed)) +
geom_point()
ggplot(nycflights, aes(x = avg_speed, y = distance)) +
geom_point() + geom_smooth()
ggplot(nycflights, aes(x = distance, y = avg_speed)) +
geom_point() + geom_smooth()
