{
    "contents" : "# ========================================================================================================\n# Description:   Week1.R - Exploratory Analysis\n#\n#\n# Author:        Bruno Hunkeler\n# Date:          xx.xx.2016\n#\n# ========================================================================================================\n\n# ========================================================================================================\n# Load Libraries\n# ========================================================================================================\n\n# Principles of Analytic Graphics\n# Principle 1: Show Comparisons\n# Principle 2: Show causality, mechanism, explanation, systematic structure\n# Principle 3: Show multivariate data\n# Principle 4: Integration of evidence\n# Principle 5: Describe and document the evidence with appropriate labels, scales, sources, etc.\n# Principle 6: Content is king\n\n\n# Annual average PM2.5 averaged over the period 2008 through 2010\n\npollution <- read.csv(\"Data/avgpm25.csv\", colClasses = c(\"numeric\", \"character\", \"factor\", \"numeric\", \"numeric\"))\nhead(pollution)\n\n# Five Number Summary Five Number Summary\nsummary(pollution$pm25)\n\n# Boxplot\nboxplot(pollution$pm25, col = \"blue\")\n\n# Histogram\nhist(pollution$pm25, col = \"green\")\nrug(pollution$pm25, ticksize = 0.1)\n\nhist(pollution$pm25, col = \"green\", breaks = 100)\nrug(pollution$pm25, side = 1, col = \"light blue\")\n\n# ========================================================================================================\n# Overlaying Features\n# ========================================================================================================\n\nboxplot(pollution$pm25, col = \"blue\")\nabline(h = 12)\n\nhist(pollution$pm25, col = \"green\")\nabline(v = 12,lwd = 2, h = 40)\nabline(v = median(pollution$pm25), col = \"magenta\", lwd = 4)\n\n# Barplot\nbarplot(table(pollution$region), col = \"wheat\", main = \"Number of Counties in Each Region\")\n\n# ========================================================================================================\n# Multiple dimensions\n# ========================================================================================================\n\n# Two dimensions:\n# - Multiple/overlayed 1-D plots (Lattice/ggplot2)\n# - Scatterplots\n# - Smooth scatterplots\n\n# More than two dimentions:\n# - Overlayed/multiple 2-D plots; coplots\n# - Use color, size, shape to add dimensions\n# - Spinning plots\n# - Actual 3-D plots (not that useful)\n\n# Multiple Boxplots\nboxplot(pm25 ~ region, data = pollution, col = \"red\")\n\n# Multiple Histograms\npar(mfrow = c(2, 1), mar = c(4, 4, 2, 1))\nhist(subset(pollution, region == \"east\")$pm25, col = \"green\")\nhist(subset(pollution, region == \"west\")$pm25, col = \"green\")\n\n# Scatterplot\nwith(pollution, plot(latitude, pm25))\nabline(h = 12, lwd = 2, lty = 2)\n\n# Scatterplot - Using Color\nwith(pollution, plot(latitude, pm25, col = region))\nabline(h = 12, lwd = 2, lty = 2)\n\n# Multiple Scatterplots\npar(mfrow = c(1, 2), mar = c(5, 4, 2, 1))\nwith(subset(pollution, region == \"west\"), plot(latitude, pm25, main = \"West\"))\nwith(subset(pollution, region == \"east\"), plot(latitude, pm25, main = \"East\"))\n\n# The Base Plotting System\n# - \"Artist's palette\" model\n# - Start with blank canvas and build up from there\n# - Start with plot function (or similar)\n# - Use annotation functions to add/modify (text, lines, points, axis)\n\n# - Convenient, mirrors how we think of building plots and analyzing data\n# - Can’t go back once plot has started (i.e. to adjust margins); need to plan in advance\n# - Difficult to \"translate\" to others once a new plot has been created (no graphical \"language\")\n# - Plot is just a series of R commands\n\n# Base Plot\nlibrary(datasets)\ndata(cars)\nwith(cars, plot(speed, dist))\n\n# The Lattice System\n# - Plots are created with a single function call (xyplot, bwplot, etc.)\n# - Most useful for conditioning types of plots: Looking at how y changes with x across levels of z\n# - Things like margins/spacing set automatically because entire plot is specified at once\n# - Good for puttng many many plots on a screen\n\n# - Sometimes awkward to specify an entire plot in a single function call\n# - Annotation in plot is not especially intuitive\n# - Use of panel functions and subscripts difficult to wield and requires intense preparation\n# - Cannot \"add\" to the plot once it is created\n\n# Lattice Plot\nlibrary(lattice)\nstate <- data.frame(state.x77, region = state.region)\nxyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))\n\n# The ggplot2 System\n# - Splits the difference between base and lattice in a number of ways\n# - Automatically deals with spacings, text, titles but also allows you to annotate by \"adding\" to a plot\n# - Superficial similarity to lattice but generally easier/more intuitive to use\n# - Default mode makes many choices for you (but you can still customize to your heart's desire)\n\n# ggplot2 Plot\nlibrary(ggplot2)\ndata(mpg)\nqplot(displ, hwy, data = mpg)\n\n# Summary:\n# Base: \"artist's palette\" model\n# Lattice: Entire plot specified by one function; conditioning\n# ggplot2: Mixes elements of Base and Lattice\n\n# Plotting System\n#\n# The core plotting and graphics engine in R is encapsulated in the following packages:\n# - graphics: contains plotting functions for the \"base\" graphing systems, including plot, hist,\n# boxplot and many others.\n# - grDevices: contains all the code implementing the various graphics devices, including X11, PDF,\n# PostScript, PNG, etc.\n# \n# The lattice plotting system is implemented using the following packages:\n# - lattice: contains code for producing Trellis graphics, which are independent of the “base” graphics\n# system; includes functions like xyplot, bwplot, levelplot\n# - grid: implements a different graphing system independent of the “base” system; the lattice\n# package builds on top of grid; we seldom call functions from the grid package directly\n\n# The Process of Making a Plot The Process of Making a Plot\n# When making a plot one must first make a few considerations (not necessarily in this order):\n# - Where will the plot be made? On the screen? In a file?\n# - How will the plot be used?\n#       - Is the plot for viewing temporarily on the screen?\n#       - Will it be presented in a web browser?\n#       - Will it eventually end up in a paper that might be printed?\n#       - Are you using it in a presentation?\n# - Is there a large amount of data going into the plot? Or is it just a few points?\n# - Do you need to be able to dynamically resize the graphic?\n# - What graphics system will you use: base, lattice, or ggplot2? These generally cannot be mixed.\n# - Base graphics are usually constructed piecemeal, with each aspect of the plot handled\n# separately through a series of function calls; this is often conceptually simpler and allows plotting\n# to mirror the thought process\n# - Lattice graphics are usually created in a single function call, so all of the graphics parameters\n# have to specified at once; specifying everything at once allows R to automatically calculate the\n# necessary spacings and font sizes.\n# - ggplot2 combines concepts from both base and lattice graphics but uses an independent\n# implementation\n\n# Base Graphics\n# Base graphics are used most commonly and are a very powerful system for creating 2-D graphics.\n# - There are two phases to creating a base plot\n#       - Initializing a new plot\n#       - Annotating (adding to) an existing plot\n# - Calling plot(x, y) or hist(x) will launch a graphics device (if one is not already open) and\n# draw a new plot on the device\n# - If the arguments to plot are not of some special class, then the default method for plot is\n# called; this function has many arguments, letting you set the title, x axis label, y axis label, etc.\n# - The base graphics system has many parameters that can set and tweaked; these parameters are\n# documented in ?par; it wouldn’t hurt to try to memorize this help page!\n\n# Histogram\nlibrary(datasets)\nhist(airquality$Ozone) ## Draw a new plot\n\n# Scatterplot\nlibrary(datasets)\nwith(airquality, plot(Wind, Ozone))\n\n# Boxplot\nlibrary(datasets)\nairquality <- transform(airquality, Month = factor(Month))\nboxplot(Ozone ~ Month, airquality, xlab = \"Month\", ylab = \"Ozone (ppb)\")\n\n# Some Important Base Graphics Parameters Some Important Base Graphics Parameters\n# Many base plotting functions share a set of parameters. Here are a few key ones:\n# - pch: the plotting symbol (default is open circle)\n# - lty: the line type (default is solid line), can be dashed, dotted, etc.\n# - lwd: the line width, specified as an integer multiple\n# - col: the plotting color, specified as a number, string, or hex code; the colors() function gives\n# you a vector of colors by name\n# - xlab: character string for the x-axis label\n# - ylab: character string for the y-axis label\n# The par() function is used to specify global graphics parameters that affect all plots in an R\n# session. These parameters can be overridden when specified as arguments to specific plotting\n# functions.\n# - las: the orientation of the axis labels on the plot\n# - bg: the background color\n# - mar: the margin size\n# - oma: the outer margin size (default is 0 for all sides)\n# - mfrow: number of plots per row, column (plots are filled row-wise)\n# - mfcol: number of plots per row, column (plots are filled column-wise)\n\n# Default values for global graphics parameters\npar(\"lty\")\n## [1] \"solid\"\npar(\"col\")\n## [1] \"black\"\npar(\"pch\")\n## [1] 1\npar(\"bg\")\n## [1] \"transparent\"\npar(\"mar\")\n## [1] 5.1 4.1 4.1 2.1\npar(\"mfrow\")\n## [1] 1 1\n\n# Base Plotting Functions Base Plotting Functions:\n# plot: make a scatterplot, or other type of plot depending on the class of the object being plotted\n# lines: add lines to a plot, given a vector x values and a corresponding vector of y values (or a 2-                                                                                                    \n# column matrix); this function just connects the dots\n# points: add points to a plot\n# text: add text labels to a plot using specified x, y coordinates\n# title: add annotations to x, y axis labels, title, subtitle, outer margin\n# mtext: add arbitrary text to the margins (inner or outer) of the plot\n# axis: adding axis ticks/labels\n\n# Base Plot with Annotation\nwith(airquality, plot(Wind, Ozone, main = \"Ozone and Wind in New York City\", type = \"n\"))\nwith(subset(airquality, Month == 5), points(Wind, Ozone, col = \"blue\"))\nwith(subset(airquality, Month != 5), points(Wind, Ozone, col = \"red\"))\nlegend(\"topright\", pch = 1, col = c(\"blue\", \"red\"), legend = c(\"May\", \"Other Months\"))\n\n# Base Plot with Regression Line\nwith(airquality, plot(Wind, Ozone, main = \"Ozone and Wind in New York City\", pch = 20))\nmodel <- lm(Ozone ~ Wind, airquality)\nabline(model, lwd = 2)\n\n# Multiple Base Plots\npar(mfrow = c(1, 2))\nwith(airquality, {\n  plot(Wind, Ozone, main = \"Ozone and Wind\")\n  plot(Solar.R, Ozone, main = \"Ozone and Solar Radiation\")\n})\n\npar(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))\nwith(airquality, {\n  plot(Wind, Ozone, main = \"Ozone and Wind\")\n  plot(Solar.R, Ozone, main = \"Ozone and Solar Radiation\")\n  plot(Temp, Ozone, main = \"Ozone and Temperature\")\n  mtext(\"Ozone and Weather in New York City\", outer = TRUE)\n})\n\n# ========================================================================================================\n# Demonstration\n# ========================================================================================================\n\nx <- rnorm(100)\nhist(x)\ny <- rnorm(100)\nplot(x, y)\nz <- rnorm(100)\nplot(x, z)\nplot(x, y)\npar(mar = c(2, 2, 2, 2)) # change margin size (bottom-1, left-2, top-3, right-4)\nplot(x, y)\npar(mar = c(4, 4, 2, 2))\nplot(x, y)\nplot(x, y, pch = 20)\nplot(x, y, pch = 19)\nplot(x, y, pch = 2)\nplot(x, y, pch = 3)\nplot(x, y, pch = 4)\n# example(points)\ntitle(\"Scatterplot\") # rename title\ntext(-2, -2, \"Label\")\nlegend(\"topleft\", legend = \"Data\", pch = 20)\nfit <- lm(y ~ x)\nabline(fit)\nabline(fit, lwd = 3)\nabline(fit, lwd = 3, col = \"blue\")\nplot(x, y, xlab = \"Weight\", ylab = \"Height\", main = \"Scatterplot\", pch = 20)\nlegend(\"topright\", legend = \"Data\", pch = 20)\nfit <- lm(y ~ x)\nabline(fit, lwd = 3, col = \"red\")\nz <- rpois(100, 2)\npar(mfrow = c(2, 1))\nplot(x, y, pch = 20)\nplot(x, z, pch = 19)\npar(\"mar\")\npar(mar = c(2, 2, 1, 1))\nplot(x, y, pch = 20)\nplot(x, z, pch = 19)\npar(mfrow = c(1, 2))\nplot(x, y, pch = 20)\nplot(x, z, pch = 20)\npar(mar = c(4, 4, 2, 2))\nplot(x, y, pch = 20)\nplot(x, z, pch = 20)\npar(mfrow = c(2, 2))\nplot(x, y)\nplot(x, z)\nplot(z, x)\nplot(y, x)\npar(mfcol = c(2, 2))\nplot(x, y)\nplot(x, z)\nplot(z, x)\nplot(y, x)\npar(mfrow = c(1, 1))\nx <- rnorm(100)\ny <- x + rnorm(100)\ng <- gl(2, 50, labels = c(\"Male\", \"Female\"))\nstr(g)\nplot(x, y)\nplot(x, y, type = \"n\")\npoints(x[g == \"Male\"], y[g == \"Male\"], col = \"green\")\npoints(x[g == \"Female\"], y[g == \"Female\"], col = \"blue\", pch = 19)\n\n# ========================================================================================================\n# Graphics Device\n# ========================================================================================================\n?Devices\n\n# for screen device:\n# 1. Call a plotting function like plot, xyplot, or qplot\n# 2. The plot appears on the screen device\n# 3. Annotate plot if necessary\n# 4. Enjoy\nlibrary(datasets)\nwith(faithful, plot(eruptions, waiting)) ## Make plot appear on screen device\ntitle(main = \"Old Faithful Geyser data\") ## Annotate with a title\n\n\n# for file devices:\n# 1. Explicitly launch a graphics device\n# 2. Call a plotting function to make a plot (Note: if you are using a file device, no plot will appear on the screen)\n# 3. Annotate plot if necessary\n# 4. Explicitly close graphics device with dev.off() (this is very important!)\npdf(file = \"myplot.pdf\") ## Open PDF device; create 'myplot.pdf' in my working directory\n## Create plot and send to a file (no plot appears on screen)\nwith(faithful, plot(eruptions, waiting))\ntitle(main = \"Old Faithful Geyser data\") ## Annotate plot; still nothing on screen\ndev.off() ## Close the PDF file device\n## Now you can view the file 'myplot.pdf' on your computer\n\n# Graphics File Devices Graphics File Devices\n# There are two basic types of file devices: vector and bitmap devices\n# - Vector formats:\n#       - pdf: useful for line-type graphics, resizes well, usually portable, not efficient if a plot has many\n#       objects/points\n#       - svg: XML-based scalable vector graphics; supports animation and interactivity, potentially useful\n#       for web-based plots\n#       - win.metafile: Windows metafile format (only on Windows)\n#       - postscript: older format, also resizes well, usually portable, can be used to create\n#       encapsulated postscript files; Windows systems often don’t have a postscript viewer\n# - Bitmap formats\n#       - png: bitmapped format, good for line drawings or images with solid colors, uses lossless\n#       compression (like the old GIF format), most web browsers can read this format natively, good for\n#       plotting many many many points, does not resize well\n#       - jpeg: good for photographs or natural scenes, uses lossy compression, good for plotting many\n#       many many points, does not resize well, can be read by almost any computer and any web\n#       browser, not great for line drawings\n#       - tiff: Creates bitmap files in the TIFF format; supports lossless compression\n#       - bmp: a native Windows bitmapped format\n\n# Multiple Open Graphics Devices Multiple Open Graphics Devices\n# - It is possible to open multiple graphics devices (screen, file, or both), for example when viewing\n# multiple plots at once\n# - Plotting can only occur on one graphics device at a time\n# - The currently active graphics device can be found by calling dev.cur()\n# - Every open graphics device is assigned an integer >= 2.\n# - You can change the active graphics device with dev.set(<integer>) where <integer> is the\n# number associated with the graphics device you want to switch to\n\n# Copying Plots Copying Plots\n# Copying a plot to another device can be useful because some plots require a lot of code and it can\n# be a pain to type all that in again for a different device.\n#       - dev.copy: copy a plot from one device to another\n#       - dev.copy2pdf: specifically copy a plot to a PDF file\n# NOTE: Copying a plot is not an exact operation, so the result may not be identical to the original.\nlibrary(datasets)\nwith(faithful, plot(eruptions, waiting)) ## Create plot on screen device\ntitle(main = \"Old Faithful Geyser data\") ## Add a main title\ndev.copy(png, file = \"geyserplot.png\") ## Copy my plot to a PNG file\ndev.off() ## Don't forget to close the PNG device!\n",
    "created" : 1455369283180.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1841921582",
    "id" : "1431689E",
    "lastKnownWriteTime" : 1455386939,
    "path" : "C:/Users/bruno/OneDrive/Dokumente/Coursera_Courses/Data Science/004_Exploratory_Data_Analysis/week 1/Code/Exploratory_Graphs/week1.R",
    "project_path" : "week1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}