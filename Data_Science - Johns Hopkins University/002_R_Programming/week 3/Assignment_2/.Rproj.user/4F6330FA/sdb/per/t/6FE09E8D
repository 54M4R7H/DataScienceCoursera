{
    "contents" : "# =================================================================================================\n# Description: Assignment 2 - makeCacheMatrix \n#              This function creates a special \"matrix\" object that can cache its inverse. \n#              The function conatins 4 functions (sections)\n#              \n#              1) set the value of the matrix\n#              2) get the value of the matrix\n#              3) setInv the value of the inverse\n#              4) getInv the value of the inverse\n# \n# Parameter:   mat    - Matrix to cache (invert)\n# return:      return - the special matrix \n#\n#\n# Authhor:     Bruno Hunkeler \n# Date:        08.11.2015\n# =================================================================================================\n\nmakeCacheMatrix <- function(mat = matrix()) {\n  \n  inverse <- NULL # initialize  inverse to null\n  \n  # set the value of the matrix\n  set <- function(y) {  \n    mat <<- y\n    inverse <<- NULL\n  }\n  \n  # return the value of the matrix\n  get <- function() {\n    mat\n  }\n  \n  #set(cache) the value of the inverse of the matrix\n  setInv <- function(cache) {\n    inverse <<- cache\n  }\n  \n  #return the value of the inverse of the matrix\n  getInv <- function() {\n    inverse \n    } \n  \n  #return the special matrix\n  list(set = set, get = get, setInv = setInv, getInv = getInv)\n  \n}\n\n# =================================================================================================\n# Description: Assignment 2 - cacheSolve \n#              This function computes the inverse of the special \"matrix\" returned by \n#              makeCacheMatrix above. If the inverse has already been calculated (and the matrix \n#              has not changed), then the cachesolve should retrieve the inverse from the cache.\n#              \n# Parameter:   mat - matrix\n# return:      the cached matrix (inversed) \n#\n# Author:      Bruno Hunkeler \n# Date:        08.11.2015\n# =================================================================================================\n\n\ncacheSolve <- function(mat, ...) {\n        \n  #  First check to see if the inverse has already been calculated.\n  inverse <- mat$getInv()\n        \n  # if the inverse has already been calculated and cached, \n  # return this instance\n  if (!is.null(inverse)) {\n     \n    message(\"getting the cached matrix\")\n    return(inverse)\n    }\n  \n  # if it is not cached, calculate it using solve() and cache the matrix,\n  # then return it\n  inverse <- solve(mat$get(), ...)\n  mat$setInv(inverse)\n  inverse\n}\n\n\n\n\n\n\n\n\n\n",
    "created" : 1447000500872.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1790006755",
    "id" : "6FE09E8D",
    "lastKnownWriteTime" : 1447006167,
    "path" : "C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 3/Assignment_2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}