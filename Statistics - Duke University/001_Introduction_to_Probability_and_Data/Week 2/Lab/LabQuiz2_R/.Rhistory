library('devtools')
library('ggplot2')
library('plyr')
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
install.packages('RCurl')
install_github("StatsWithR/statsr")
library('devtools')
library('ggplot2')
library('plyr')
require('devtools')
library('devtools')
install_github('StatsWithR/statsr')
install.packages("Rcpp")
install.packages('plyr')
library(StatsRBHU)
data(arbuthnot)
library(statsr)
head(arbuthnot)
dim(arbuthnot)
arbuthnot[girls]
arbuthnot$girls
plot(arbuthnot$year, arbuthnot$girls)
plot(arbuthnot$year, arbuthnot$girls, type = "l")
head(present)
dim(present)
sum.birth.year <- ddply(present, .(year), summarise, steps = sum(boys))
library(ddply)
library(dplyr)
sum.birth.year <- ddply(present, .(year), summarise, steps = sum(boys))
library(plyr)
sum.birth.year <- plyr::ddply(present, .(year), summarise, steps = sum(boys))
View(sum.birth.year)
sum.birth.year <- plyr::ddply(present, .(year), summarise, number = sum(boys))
head(present)
sum(arbuthnot$girls)
length(arbuthnot$girls)
sum.birth.year <- plyr::ddply(present, .(year), summarise, total = (boys + girls))
View(sum.birth.year)
total.birth.year <- plyr::ddply(present, .(year), summarise, total = (boys + girls))
total.birth.year$boys <- plyr::ddply(present, .(year), summarise, boys = (boys))
View(total.birth.year)
birth.year <- plyr::ddply(present, .(year), summarise, total = (boys + girls))
birth.year$boys <- plyr::ddply(present, .(year), summarise, boys = (boys))
View(birth.year)
birth.year$boys.year <- NULL
View(birth.year)
birth.year$fraction <- lapply(present, function(x) x$total / x$boys)
birth.year$fraction <- lapply(present, function(x) total / boys)
head(present)
birth.year$fraction <- lapply(present, (total / boys)
birth.year$fraction <- lapply(present, (total / boys)
)
total <- present$girls + present$boys
prop_boys  <- total + present$boys
prop_boys  <- (total / present$boys)
plot(present$year, prop_boys, type ='l')
par(mfrow = c(1, 2))
plot(present$year, prop_boys, type ='l', col = 'blue')
plot(present$year, total, type ='l', col = 'red')
more_boys  <- ifelse(present$boys > present$girls, 'TRUE', 'FALSE')
more_boys
data <- present
View(data)
data$more <- ifelse(data$boys > data$girls, 'TRUE', 'FALSE')
prop_boy_girl <- data$boys / data$girls
plot(present$year, prop_boy_girl, type ='l', col = 'green')
prop_boy_girl <- data$boys / data$girls
prop_girl_boy <- data$girls / data$boys
par(mfrow = c(1, 2))
plot(present$year, prop_boy_girl, type ='l', col = 'green')
plot(present$year, prop_girl_boy, type ='l', col = 'green')
View(data)
data$total <- total
max(data$total)
data[, max(data$total)]
which.max(data$total)
data$year[which.max(data$total)]
$girls
arbuthnot$girls
dim(arbuthnot)
plot(arbuthnot$year, arbuthnot$girls, type = "l")
head(arbuthnot)
dim(present)
install.packages("devtools")
library(devtools)
install.packages('curl')
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
head(nycflights)
data(nycflights)
library(statsr)
data(nycflights)
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
library(dplyr)
library(ggplot2)
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay < 5, "on time", "delayed"))
table(nycflights$arr_delay)
install.packages("devtools")
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
library('statsr')
data(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay < 5, "on time", "delayed"))
library('dplyr')
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay < 5, "on time", "delayed"))
library(statsr)
library(dplyr)
library(ggplot2)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay < 5, "on time", "delayed"))
data(nycflights)
data(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay < 5, "on time", "delayed"))
View(nycflights)
a <- c(0, 100, 200, 300, 400, 500, 600)
sd(a)
b <- c(0,1,1,1,1,1,2)
c <- c(0, 25, 25, 25, 25, 25, 25)
d <- c(0,1,2,3,4,5,6)
sd(a, b)
sd(a)
sd(b)
sd(c)
sd(d)
library('devtools')
library('curl')
library('ggplot2')
library('dplyr')
# library('StatsRBHU')
# install_github('StatsWithR/statsr')
library(statsr)
temp = FALSE
# ==================================================================================================
# Lab Quiz 2
# ==================================================================================================
data(nycflights)
names(nycflights)
if ( temp == TRUE) {
ggplot(data = nycflights, aes(x = log10(dep_delay))) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = log10(dep_delay))) +
geom_boxplot()
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
}
# ==================================================================================================
# Question 1
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
dim(sfo_feb_flights)
# Answer: 68
# ==================================================================================================
# Question 2
sfo_feb_flights %>%
summarise(mean_dd = mean(arr_delay), sd_dd = sd(arr_delay), n = n())
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 10)
sfo_arr_delay <- sfo_feb_flights %>%
filter(arr_delay > 120)
# Answer: C
# ==================================================================================================
# Question 3
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_dd = median(arr_delay), iqr_dd =IQR(arr_delay), n = n())
# Answer: D - Delta and United Airlines
# ==================================================================================================
# Question 4
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# Answer: C - July
# ==================================================================================================
# Question 5
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
# Answer: E - December
# ==================================================================================================
# Question 6
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
# dont't know yet
# Answer: A - Mean would be more reliable as it gives us the true average.
# ==================================================================================================
# Question 7
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# Answer: C - LGA
# ==================================================================================================
# Question 8
# Mutate the data frame so that it includes a new variable that contains the average speed, avg_speed
# traveled by the plane for each flight (in mph). What is the tail number of the plane with the fastest
# avg_speed? Hint: Average speed can be calculated as distance divided by number of hours of travel, and
# note that air_time is given in minutes. If you just want to show the avg_speed and tailnum and none of
# the other variables, use the select function at the end of your pipe to select just these two variables
# with select(avg_speed, tailnum). You can Google this tail number to find out more about the aircraft.
nycflights <- nycflights %>%
mutate(avg_speed = distance / air_time * 60)
nycflights %>%
filter(avg_speed == max(avg_speed)) %>%
select(tailnum, avg_speed)
# Answer: A - N666DN
# ==================================================================================================
# Question 9
# ggplot(nycflights, aes(x = avg_speed, y = distance)) +
#   geom_point() + geom_smooth()
ggplot(nycflights, aes(x = distance, y = avg_speed)) +
geom_point() + geom_smooth()
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay < 0, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(ot = ifelse(dep_type == "delayed" & arr_type == "on time", "on time", "delayed"))
sum(dep_type == "delayed")
sum(nycflights$dep_type == "delayed")
sum(nycflights$ot == "on time")
sum(nycflights$dep_type == "delayed") / sum(nycflights$ot == "on time")
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
head(nycflights$dep_delay)
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
x <- nycflights %>%
group_by(month)
x
x <- nycflights %>%
group_by(month) %>% median(dep_delay)
x <- nycflights %>%
group_by(month) %>% median(nycflights$dep_delay)
x <- nycflights %>%
group_by(month) %>% summarize(median_dd = median(dep_delay))
x
x <- nycflights %>%
group_by(month) %>% summarise(median_dd = median(dep_delay))
x
median.delay <- ddply(nycflights, .(month), summarise, delay = round(median(dep_delay, na.rm = TRUE), 2))
library(plyr)
median.delay <- ddply(nycflights, .(month), summarise, delay = round(median(dep_delay, na.rm = TRUE), 2))
View(median.delay)
str(nycflights)
nycflights$month <- as.factor(nycflights$month)
str(nycflights)
median.delay <- ddply(nycflights, .(month), summarise, delay = round(median(dep_delay, na.rm = TRUE), 2))
nycflights$ot <- as.factor(nycflights$ot)
proportion <- as.array(table(nycflights$ot))
prop.table(proportion)
split(nycflights, nycflights$month)
sum(nycflights$dep_type == "delayed") / sum(nycflights$ot == "on time")
5.857951 / 100
t <- split(nycflights, nycflights$month)
head(t)
data <- nycflights
data$year <- NULL
data$day <- NULL
data$dep_time <- NULL
data$arr_time <- NULL
data$tailnum <- NULL
data$flight <- NULL
data$dest <- NULL
data$hour <- NULL
data$minute <- NULL
data$avg_speed <- NULL
data$ot <- NULL
data$arr_type <- NULL
data$dep_type <- NULL
t <- split(data, data$month)
t
data$distance <- NULL
data$air_time <- NULL
dd <- subset(data, c('month', 'dep_delay'))
dd <- subset(data, 1:2
)
dd <- data[, 1:2]
t <- split(dd, dd$month)
head(t)
class(t)
a <- list[1]
a <- list(1)
a
a <- t(1)
a
t[1]
a1 <- t[1]
a1 <- data.frame(t[1])
a2 <- data.frame(t[2])
a3 <- data.frame(t[3])
a4 <- data.frame(t[4])
a5 <- data.frame(t[5])
median(a1$X1.dep_delay)
median(a1$dep_delay)
View(a1)
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_histogram()
hist(nycflights$month, dep_delay)
nycflights$month <- as.numeric(nycflights)
nycflights$month <- as.numeric(nycflights$month)
hist(nycflights$month, dep_delay)
hist(nycflights$month, nycflights$dep_delay)
