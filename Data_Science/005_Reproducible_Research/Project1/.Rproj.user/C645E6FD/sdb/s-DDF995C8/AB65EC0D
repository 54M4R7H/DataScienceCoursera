{
    "contents" : "# ========================================================================================================================================\n# Description:   Course Project 1 / Plot1.R\n#                Coursera Data Science at Johns Hopkins University\n#\n#                It is now possible to collect a large amount of data about personal movement using activity monitoring devices such as \n#                a Fitbit, Nike Fuelband, or Jawbone Up. These type of devices are part of the ?quantified self ? movement ? a group of \n#                enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, \n#                or because they are tech geeks. But these data remain under - utilized both because the raw data are hard to obtain and \n#                there is a lack of statistical methods and software for processing and interpreting the data.\n#\n#                This assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute \n#                intervals through out the day. The data consists of two months of data from an anonymous individual collected during \n#                the months of October and November, 2012 and include the number of steps taken in 5 minute intervals each day.\n#\n# Dataset:       Activity Monitoring Data [52kB] \n#                Download link: [https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip]\n#\n#                The variables included in this dataset are:\n#                steps:       Number of steps taking in a 5 - minute interval(missing values are coded as NA)\n#                date:        The date on which the measurement was taken in YYYY - MM - DD format\n#                interval:    Identifier for the 5 - minute interval in which measurement was taken\n#\n# Author:        Bruno Hunkeler\n# Date:          11.04.2016\n#\n# ========================================================================================================================================\n\n# ========================================================================================================================================\n# Load Libraries\n# ========================================================================================================================================\n\n# library('dplyr')\nlibrary('ggplot2')\nlibrary('reshape2')\nlibrary('plyr')\nlibrary('timeDate')\n\n# ========================================================================================================================================\n# Part 1 - Mean total number of steps taken per day?\n# ========================================================================================================================================\n\n# ========================================================================================================================================\n# Step 1.1 - Loading data\n# ========================================================================================================================================\n\nzipFile <- \"repdata-data-activity.zip\"\n\nif (!file.exists(\"Data/activity.csv\")) {\n    dataURL <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\"\n    download.file(dataURL, zipFile, mode = \"wb\")\n    unzip(zipFile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = \"Data\", unzip = \"internal\", setTimes = FALSE)\n    file.remove(zipFile)\n}\n\n# Define Directory where File is located\ndirName <- 'Data'\n\n# load power consumption data\nfileName = \"activity.csv\"\nfileNameActivity <- file.path(dirName, fileName)\n\ndata <- read.csv(file = fileNameActivity, header = TRUE, colClasses = c(\"numeric\", \"Date\", \"numeric\"))\n\n# set locale to english \nSys.setlocale(\"LC_TIME\", \"English\")\n\n# Step 1.2 - Preprocessing the data for analysis \n\n# add the weekday to the dataset\ndata$weekday <- weekdays(data$date)\n\n# create a copy of data set with NA rows\ndata.WithNA <- data\n\n# remove all rows with 'NA'\ndata.NoNA <- data[complete.cases(data),]\n\n\n# Step 1.3 - Calculate the total number of steps taken per day\n\n# Calculate total number of steps per day  \nsum.steps.day <- ddply(data.NoNA, .(date), summarise, steps = sum(steps, na.rm = TRUE))\n\n\n# Step 1.4 - Histogram of the total number of steps taken each day\n\nplot(sum.steps.day$date, sum.steps.day$steps, type = \"h\", main = \"Histogram of daily steps\", xlab = \"Date\", ylab = \"Steps per day\", col = \"blue\", lwd = 8)\nabline(h = mean(sum.steps.day$steps, na.rm = TRUE), col = \"red\", lwd = 2)\n\n\n# Step 1.5 - Calculate and report the mean and median of the total number of steps taken per day\n\n# Mean steps per Day\npaste(\"Mean steps per Day =\", round(mean(sum.steps.day$steps, na.rm = TRUE), 0))\n\n# Median steps per Day\npaste(\"Median steps per Day =\", round(median(sum.steps.day$steps, na.rm = TRUE), 0))\n\n# ========================================================================================================================================\n# Part 2 - Average daily activity pattern\n# ========================================================================================================================================\n\n# Step 2.1 - Calculate total number of steps per year and interval\n\n# Calculate total number of steps per year interval\nmean.steps.interval <- ddply(data.WithNA, .(interval), summarise, steps = mean(steps, na.rm = TRUE))\n\n\n# Step 2.2 - Time series plot of the 5-minute interval and the average number of steps taken, averaged across all days\n\nplot(mean.steps.interval$interval, mean.steps.interval$steps, type = \"l\", main = \"Average daily activity by interval\", xlab = \"Interval\",\n     ylab = \"Steps per interval\", col = \"blue\", lwd = 2)\nabline(h = mean(mean.steps.interval$steps, na.rm = TRUE), col = \"red\", lwd = 2)\n\n\n# Step 2.3 - Maximum number of steps on 5 - minute interval, on average across all the days in the dataset\n\n# Maximum number of steps 5-minute interval\npaste(\"Maximum number of steps in interval =\", mean.steps.interval$interval[which.max(mean.steps.interval$steps)])\npaste(\"Maximum number of steps =\", round(max(mean.steps.interval$steps), 0))\n\n# ========================================================================================================================================\n# Part 3 - Imputing missing values\n# ========================================================================================================================================\n\n# Step 3.1 - Calculate number of rows with missing data (NA)\n\n# Calculate number of rows in data set with NA rows\nsum(is.na(data.WithNA$steps))\n\n# Step 3.2 - Devise a strategy for filling in all of the missing values in the dataset\n\n# Devised startegy\n# Humans usually follow certain patterns throughout the day / week. Therefore we assume that if\n# we calculate the mean number of steps per 5 - minute intervall, over all days, we will get a decent figure to add as NA value.\n\n# Calculate the mean value per day and interval. This gives a good average of steps for a given day\nmean.weekday <- ddply(data.WithNA, .(interval, weekday), summarise, steps = round(mean(steps, na.rm = TRUE), 2))\n\n# Get list of indices where steps value = NA\nnaIndex = which(is.na(data.WithNA$steps))\n\n# Merge dataset 'data.WithNA' with dataset mean.steps.interval \nmerged.NA = merge(data.WithNA, mean.steps.interval, by = \"interval\", suffixes = c(\".actual\", \".stepsInt\"))\n\n# give the dataset a more precise name\ndata.Complete <- data.WithNA\n\n# Replace NA values with value from steps\ndata.Complete[naIndex, \"steps\"] <- merged.NA[naIndex, 'steps.stepsInt']\n\n# verify if dataset contains NA values\npaste(\"Missing values in new dataset = \", sum(is.na(data.Complete)))\n\n# Calculate total number of steps per day  \nsteps.day <- ddply(data.Complete, .(date), summarise, steps = round(sum(steps, na.rm = TRUE), 0))\n\n# Step 3.3 - Create a new dataset that is equal to the original dataset but with the missing data filled in\n\nplot(steps.day$date, steps.day$steps, type = \"h\", main = \"Histogram of daily steps (added NA Values)\", xlab = \"Date\", ylab = \"Steps per day\", col = \"blue\", lwd = 8)\nabline(h = mean(steps.day$steps, na.rm = TRUE), col = \"red\", lwd = 2)\n\n# ========================================================================================================================================\n# Part 4 - Differences in activity patterns between weekdays and weekends?\n# ========================================================================================================================================\n\n# Step 4.1 - Indicating whether a given date is a weekday or weekend day.\n\n# Evaluate wether date is weekday or weekend\ndata.Complete$daytype <- lapply(data.Complete$date, function(x) ifelse(isWeekday(x, wday = 1:5), 'weekday', 'weekend'))\n\n# flatten list to vector\ndata.Complete$daytype <- unlist(data.Complete$daytype, use.names = TRUE)\n\n# Create Factor variable\ndata.Complete$daytype <- as.factor(data.Complete$daytype)\n\n\n# Step 4.2 - Time series plot of the 5 - minute interval and the average number of steps taken, averaged across all weekday days or weekend days . \n\n# Calculate the 5 - minute interval and the average number of steps taken on weekdays and weekends\nday.interval.Steps <- ddply(data.Complete, .(interval, daytype), summarise, steps = mean(steps, na.rm = TRUE))\n\n# Plot the time series plot (facet) of 5 - minute interval and the average number of steps taken on weekdays and weekends\nggplot(day.interval.Steps, aes(x = interval, y = steps)) +\n    geom_line(col='blue') +\n    ylab('Number of steps') + xlab(\"Interval\") +\n    ggtitle(\"Number of Steps per Interval (weekend/weekend\") +\n    facet_grid(daytype ~ .)\n",
    "created" : 1460622438535.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4000514696",
    "id" : "AB65EC0D",
    "lastKnownWriteTime" : 1460622551,
    "path" : "C:/Users/bruno/OneDrive/Dokumente/Coursera_Courses/Data Science/005_Reproducible_Research/Project1_R/Project1.R",
    "project_path" : "Project1.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}