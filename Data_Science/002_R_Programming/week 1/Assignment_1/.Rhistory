subset <-data[subsetM > FALSE, ]
subset
good <- complete.cases(subset)
subset[good, ][, 4]
subset[, ][, 4]
mean(subset[, ][, 4])
subsetM <- data$Month == 5
subsetM
subset <-data[subsetM > FALSE, ]
subset
max(subset$Ozone)
subset$Ozone
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_complete.R')
View(dataframe_TC1)
View(dataframe_TC1)
View(dataframe_TC2)
View(dataframe_TC3)
View(dataframe_TC3)
View(dataframe_TC2)
View(dataframe_TC4)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
submit()
submit()
submit()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
sapply(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c( z , 555)
c( z , 555, z)
z * 2 + 100
my_sqrt <- sqrt(abs(z-1)
)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
library(swirl)
swirl()
submit()
rm(list=ls())
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
reminder(5)
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]}, 6)
evaluate(function(c(8, 4, 0)){x[1]}, 6)
x <- c(8, 4, 0)
evaluate(function(x){x[1]}, 6)
info()
play()
x <- c(8, 4, 0)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
nxt()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
play()
telegram <- function(start = "START", arg1, arg2, stp = "STOP"){
paste(start, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
telegram <- function(arg1, arg2, strt = "START", stp = "STOP"){
paste(strt, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
nxt()
submit()
play()
telegram <- function(strt = "START", stp = "STOP", arg1, arg2){
paste(strt, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
telegram <- function(strt = "START", stp = "STOP", arg1 = arg1, arg2 = arg2){
paste(strt, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
telegram <- function(arg1, arg2){
paste("START", arg1, arg2, "STOP", sep = " " )
}
telegram("Good", "morning")
telegram("Good", "morning")
nxt()
submit()
play()
?paste
telegram <- function(arg1, arg2){
paste("START", arg1, arg2, "STOP", sep = " " )
}
telegram("Du", "Depp")
nxt()
play()
telegram <- function(arg1, arg2){
paste("START", arg1, arg2, "STOP", sep = " ", colapse = NULL )
}
telegram("Du", "Depp")
nxt()
submit()
nxt()
submit()
info()
skip()
telegram("Hello", "Fellow")
submit()
play()
args <- list(place = "USA", adjective = "fast", noun = "Summer")
mad_libs <- function(args){
# Do your argument unpacking here!
place <- args$place
adjective <- args$adjective
noun <- args$noun
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(args)
nxt()
submit()
play()
args <- list(place = "USA", adjective = "fast", noun = "Summer")
args
mad_libs <- function(args){
# Do your argument unpacking here!
place <- args$place
adjective <- args$adjective
noun <- args$noun
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(args)
nxt()
submit()
skip()
mad_libs("Depp", "Du", "Fudi")
play()
"Good" %p% "Job!"
"%p%" <- function(value){ # Remember to add arguments!
retvalue <- value
retvalue
}
"Good" %p% "Job!"
"%p%" <- function(value1, value2){ # Remember to add arguments!
retvalue <- value
retvalue
}
"%p%" <- function(value){ # Remember to add arguments!
paste(value1, value2, sep"")
}
"%p%" <- function(value){ # Remember to add arguments!
paste(value1, value2, sep"")
}
"%p%" <- function(value){ # Remember to add arguments!
paste(value1, value2, sep="")
}
"Good" %p% "Job!"
"%p%" <- function(value){ # Remember to add arguments!
value
}
"Good" %p% "Job!"
nxt()
skip()
"I" %p% "love" "R!"
"I" %p% "love"
"I" %p% "love" %p% "R!"
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("a", "b", "c", "d")
submit()
mad_libs("Depp", "Du", "Fudi")
submit()
"I" %p% "love" %p% "R!"
search()
multiply <- function (X, y) {}
multiply <- function (X, y) {
x*2 - x + y / z
}
z <- 5
multiply(10)
multiply(10, 7)
multiply <- function (X, y) {
(x*2 - x) + (y / z)
}
multiply(10, 7)
multiply <- function (X, y) {
(x^2 - x) + (y / z)
}
z <- 2
multiply(10, 8)
10^2
(x^2 - x) + (y / z)
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_correlation.R')
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_correlation.R')
corr(directory, 150);
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_correlation.R')
head(correlation_TC1)
summary(correlation_TC1)
head(correlation_TC2)
summary(correlation_TC2)
length(correlation_TC2)
head(correlation_TC4)
summary(correlation_TC4)
length(correlation_TC4)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
date()
x <- as.Date("01.101970")
POSIXct
POSIXlt
x <- as.Date("01.01.1970")
x <- as.Date("1970-01-01")
Sys.time()
Sys.timezone()
as.POSIXct(x)
swirl()
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
play()
d2
unclass(d2)
nxt()
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
source('~/.active-rstudio-document')
x <- c("a", "b", "c", "d")
for(i in 1:4){
print(x[i])
}
seq_along(x)
for(i in seq_along(x)){
print(x[i])
}
x
for(letter in x){
print(letter)
}
for(i in 1:10){
coin <- rbinom(1, 1, 0.5)
print(coin)
}
for(i in 1:10){
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
} else {
print("Tail")
}
print(coin)
}
for(i in 1:10){
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
} else {
print("Tail")
}
}
for(i in 1:100){
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
print(Hcnt)
print(Tcnt)
Hcnt <- 0
Tcnt <- 0
for(i in 1:100){
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
print(Hcnt)
print(Tcnt)
Hcnt <- 0
Tcnt <- 0
for(i in 1:1000){
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
print(Hcnt)
print(Tcnt)
Hcnt <- 0
Tcnt <- 0
for(i in 1:100){
if (i <- 20){
next()
}
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
Hcnt <- 0
Tcnt <- 0
for(i in 1:100){
if (i <- 20){
next
}
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
Hcnt <- 0
Tcnt <- 0
for(i in 1:100){
if (i <= 20){
next
}
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
Hcnt <- 0
Tcnt <- 0
for(i in 1:100){
if (i <= 20){
next
}
coin <- rbinom(1, 1, 0.5)
if(coin == 1){
print("Head")
Hcnt <- Hcnt + 1
} else {
print("Tail")
Tcnt <- Tcnt + 1
}
}
print(Hcnt)
print(Tcnt)
